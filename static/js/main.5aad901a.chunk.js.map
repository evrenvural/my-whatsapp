{"version":3,"sources":["components/Message/MessageBox/MessageBox.js","redux/constants.js","firebase.js","components/Message/Message.js","redux/actions/index.js","App.js","serviceWorker.js","redux/reducer/index.js","index.js"],"names":["MessageBox","react_default","a","createElement","id","this","props","value","Component","ACTION_TYPE","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messagesRef","ref","child","Message","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","sendMessage","state","fetchMessages","className","messages","map","message","MessageBox_MessageBox_MessageBox","type","onChange","onClick","connect","text","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","push","set","stop","_x","apply","arguments","_ref2","_callee2","_context2","on","snapshot","payload","values","val","_x2","App","components_Message_Message","Boolean","window","location","hostname","match","length","undefined","action","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5aad901a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './MessageBox.css';\r\n\r\nexport default class MessageBox extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"messageBox\">\r\n                <label>{this.props.value}</label>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const ACTION_TYPE = {\r\n    SEND_MESSAGE: \"SEND_MESSAGE\"\r\n}","import * as firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDTjZSOVnubVoZ4hy1uiX2gI2i5O3np58A\",\r\n    authDomain: \"my-whatsapp-a8771.firebaseapp.com\",\r\n    databaseURL: \"https://my-whatsapp-a8771.firebaseio.com\",\r\n    projectId: \"my-whatsapp-a8771\",\r\n    storageBucket: \"my-whatsapp-a8771.appspot.com\",\r\n    messagingSenderId: \"782392975177\",\r\n    appId: \"1:782392975177:web:b574ff77d1be3141\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nconst databaseRef = firebase.database().ref();\r\nexport const messagesRef = databaseRef.child(\"messages\");","import React, { Component } from 'react';\r\nimport MessageBox from './MessageBox/MessageBox.js';\r\nimport './Message.css';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {sendMessage, fetchMessages} from '../../redux/actions';\r\n\r\nclass Message extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            value: '',\r\n        };\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    sendMessage = () => {\r\n        this.props.sendMessage(this.state.value);\r\n        this.setState({value:\"\"});\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.props.fetchMessages();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card text-white bg-info mb-3\">\r\n                <div className=\"card-header\">EvoApp</div>\r\n                <div className=\"card-body\">\r\n\r\n                    {this.props.messages.map((message) => <MessageBox value = {message}/>)}\r\n\r\n                    <div className=\"input\">\r\n                        <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\r\n                        <button onClick={this.sendMessage}>GÃ¶nder</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n    {\r\n        messages: state\r\n    }\r\n)\r\n\r\nexport default connect(\r\n    mapStateToProps, \r\n    {sendMessage,\r\n    fetchMessages}\r\n)(Message);","import {ACTION_TYPE} from '../constants';\r\nimport { messagesRef } from '../../firebase';\r\n\r\nexport const sendMessage = text => async dispatch => {\r\n    messagesRef.push().set(text);\r\n}\r\n\r\nexport const fetchMessages = () => async dispatch => {\r\n    messagesRef.on('value', snapshot =>{\r\n        dispatch({\r\n            type: ACTION_TYPE.SEND_MESSAGE,\r\n            payload: Object.values(snapshot.val())\r\n        });\r\n    });\r\n};","import React from 'react';\nimport './App.css';\nimport Message from './components/Message/Message';\n\nfunction App() {\n  return (\n    <div>\n      <Message />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ACTION_TYPE } from '../constants';\r\n\r\nconst messages = (state = [], action) => {\r\n    let messages = [];\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SEND_MESSAGE:\r\n            messages = action.payload;\r\n            return messages;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default messages;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './redux/reducer';\n\nconst store = createStore(reducer,\n    applyMiddleware(thunk)\n    );\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , \ndocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}